from flask import Flask, request, jsonify
from flask_cors import CORS
from flask_jwt_extended import JWTManager, create_access_token
from flask_sqlalchemy import SQLAlchemy
import bcrypt
from dotenv import load_dotenv
import os


from flask_jwt_extended import JWTManager, jwt_required
from flask_jwt_extended import JWTManager, jwt_required, create_access_token, get_jwt_identity

load_dotenv()

SECRET_KEY = os.getenv('JWT_SECRET_KEY')
print(f"Loaded secret key: {SECRET_KEY}")

# Initialize Flask app
app = Flask(__name__)
app.config['JWT_SECRET_KEY'] = os.getenv('JWT_SECRET_KEY')
app.config['SQLALCHEMY_DATABASE_URI'] = "mysql+pymysql://root:@localhost:3000/termtrack"
jwt = JWTManager(app)

CORS(app)

@app.route('/signin', methods=['POST'])
def sigin():
    data = request.json
    username = data.get('username')
    password = data.get('password')
    return jsonify({"message": f"Welcome, {username}!"})

# Configure Database
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///termtrack.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['JWT_SECRET_KEY'] = app.config['JWT_SECRET_KEY'] = os.getenv('JWT_SECRET_KEY')
app.config['JWT_ACCESS_TOKEN_EXPIRES'] = False  # Set to False for testing purposes
app.config['JWT_TOKEN_LOCATION'] = ['headers', 'cookies']


# Initialize extensions
db = SQLAlchemy(app)
jwt = JWTManager(app)

# ----------------------
# Database Model
# ----------------------

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    school_name = db.Column(db.String(100), nullable=False)
    email = db.Column(db.String(100), unique=True, nullable=False)
    password = db.Column(db.String(200), nullable=False)

    def __repr__(self):
        return f'<User {self.email}>'

# ----------------------
# Authentication Routes
# ----------------------

@app.route('/api/register', methods=['POST'])
def register():
    data = request.get_json()
    
    # Validate input
    if not all(key in data for key in ['school_name', 'email', 'password']):
        return jsonify({"error": "Missing required fields"}), 400
    
    # Check if user exists
    if User.query.filter_by(email=data['email']).first():
        return jsonify({"error": "Email already registered"}), 409
    
    try:
        # Hash password
        hashed_pw = bcrypt.hashpw(data['password'].encode('utf-8'), bcrypt.gensalt())
        
        # Create new user
        new_user = User(
            school_name=data['school_name'],
            email=data['email'],
            password=hashed_pw.decode('utf-8')
        )
        
        # Add to database
        db.session.add(new_user)
        db.session.commit()
        
        return jsonify({"message": "Registration successful"}), 201
    
    except Exception as e:
        db.session.rollback()
        return jsonify({"error": str(e)}), 500

@app.route('/api/login', methods=['POST'])
def login():
    data = request.get_json()
    
    try:
        # Find user
        user = User.query.filter_by(email=data['email']).first()
        
        # Validate credentials
        if not user or not bcrypt.checkpw(data['password'].encode('utf-8'), user.password.encode('utf-8')):
            return jsonify({"error": "Invalid credentials"}), 401
        
        # Create JWT token
        access_token = create_access_token(identity=user.email)
        return jsonify(access_token=access_token), 200
    
    except Exception as e:
        return jsonify({"error": str(e)}), 500

# ----------------------
# Database Initialization
# ----------------------
with app.app_context():
    db.create_all()

if __name__ == '__main__':
    app.run(debug=True, port=5000)


@app.route('/api/test', methods=['GET'])
def test():
    return {'message': 'Server is running!'}, 200


#Beginning of End of term python code
# Add this with your other routes in app.py
@app.route('/api/term-records', methods=['POST'])
@jwt_required()
def save_term_record():
    try:
        current_user = get_jwt_identity()
        data = request.get_json()
        
        # Validate required fields
        required_fields = ['studentId', 'sba', 'eta', 'term']
        if not all(field in data for field in required_fields):
            return jsonify({"error": "Missing required fields"}), 400
            
        # Calculate final values
        final_score = (float(data['sba']) * 0.3 + float(data['eta']) * 0.7)
        proficiency = calculate_proficiency(final_score)
        
        # Create record
        new_record = TermRecord(
            student_id=data['studentId'],
            teacher_id=current_user,
            term=data['term'],
            sba_score=data['sba'],
            eta_score=data['eta'],
            final_score=final_score,
            proficiency=proficiency,
            school_days=data.get('schoolDays', 0)
        )
        
        db.session.add(new_record)
        db.session.commit()
        
        return jsonify({
            "message": "Record saved successfully",
            "recordId": new_record.id
        }), 201
        
    except ValueError as e:
        return jsonify({"error": str(e)}), 400
    except Exception as e:
        db.session.rollback()
        return jsonify({"error": "Server error"}), 500

# Add helper function
def calculate_proficiency(score):
    if score >= 80: return 'A'
    if score >= 75: return 'P'
    if score >= 70: return 'AP'
    if score >= 65: return 'D'
    return 'B'

#ending of End of term python code
#Co pilot gen code
@app.route('/api/term-records', methods=['GET'])
def get_term_records():
    try:
        # Fetch all term records (assuming TermRecord model exists)
        term_records = TermRecord.query.all()
        records = [
            {
                "id": record.id,
                "student_id": record.student_id,
                "teacher_id": record.teacher_id,
                "term": record.term,
                "sba_score": record.sba_score,
                "eta_score": record.eta_score,
                "final_score": record.final_score,
                "proficiency": record.proficiency,
                "school_days": record.school_days
            }
            for record in term_records
        ]
        return jsonify(records), 200
    except Exception as e:
        return jsonify({"error": "Server error"}), 500



if __name__ == '__main__':
    print(app.url_map)  # <-- shows all routes
    app.run(debug=True)